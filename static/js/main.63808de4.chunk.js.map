{"version":3,"sources":["components/login.js","components/profile.js","data/db.js","App.js","components/register.js","serviceWorker.js","index.js"],"names":["Login","dispatch","userName","password","className","onSubmit","e","preventDefault","type","handleSubmit","name","autoComplete","placeholder","value","onChange","currentTarget","field","to","Profile","firstName","onClick","db","localStorage","getItem","JSON","parse","sessionStorage","userDB","loginReducer","state","action","user","pass","filter","verifyLogin","length","isLogedIn","message","instialState","error","App","useReducer","useState","setUserName","setPassword","setFirstName","alert","setAlert","push","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","component","Register","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63808de4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Login = ({ dispatch, userName, password }) => {\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    dispatch({ type: \"login\" });\r\n  };\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <h2>Please login</h2>\r\n      <form onSubmit={e => handleSubmit(e)}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"userName\"\r\n          autoComplete=\"true\"\r\n          placeholder=\"username\"\r\n          value={userName}\r\n          onChange={e =>\r\n            dispatch({\r\n              type: \"input\",\r\n              userName: e.currentTarget.value,\r\n              field: \"userName\"\r\n            })\r\n          }\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          autoComplete=\"true\"\r\n          placeholder=\"password\"\r\n          value={password}\r\n          onChange={e =>\r\n            dispatch({\r\n              type: \"input\",\r\n              password: e.currentTarget.value,\r\n              field: \"password\"\r\n            })\r\n          }\r\n        />\r\n        <button>Login</button>\r\n      </form>\r\n      <p className=\"App-link\">\r\n        You don't have Account <Link to=\"/register\">Create Now</Link>\r\n      </p>\r\n\r\n      <pre>\r\n        for Testing login with: <br />\r\n        user1 1234\r\n      </pre>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\n\r\nconst Profile = ({ userName, firstName, dispatch }) => {\r\n  return (\r\n    <div>\r\n      <h1>\r\n        Welcome <small>{firstName}</small>\r\n      </h1>\r\n      <h3>You are Loged in as {userName}</h3>\r\n      <button onClick={() => dispatch({ type: \"logout\" })} className=\"logout\">\r\n        Logout\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","export default [\r\n  {\r\n    userName: \"user1\",\r\n    password: \"1234\",\r\n    firstName: \"Omar Ali\"\r\n  },\r\n  {\r\n    userName: \"user2\",\r\n    password: \"1234\",\r\n    firstName: \"Farah Gelle\"\r\n  }\r\n];\r\n","import React, { useReducer } from \"react\";\r\nimport \"./App.css\";\r\nimport Login from \"./components/login\";\r\nimport Profile from \"./components/profile\";\r\nimport userDB from \"./data/db\";\r\n\r\nconst db = localStorage.getItem(\"userDB\")\r\n  ? JSON.parse(sessionStorage.getItem(\"userDB\"))\r\n  : userDB;\r\n\r\nconst verifyLogin = (user, pass, db) => {\r\n  const result = db.filter(\r\n    ({ userName, password }) => userName === user && pass === password\r\n  );\r\n\r\n  return result;\r\n};\r\n\r\nconst loginReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"login\":\r\n      const user = verifyLogin(state.userName, state.password, db);\r\n      if (user.length) {\r\n        return {\r\n          ...state,\r\n          isLogedIn: true,\r\n          firstName: user[0].firstName,\r\n          message: \"Successfully logged in\"\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        message: \"Incorrect Username or Password\"\r\n      };\r\n    case \"logout\":\r\n      return {\r\n        ...state,\r\n        isLogedIn: false,\r\n        userName: \"\",\r\n        password: \"\",\r\n        message: \"Successfully logged out\"\r\n      };\r\n    case \"input\":\r\n      return {\r\n        ...state,\r\n        [action.field]: action[action.field]\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst instialState = {\r\n  isLogedIn: false,\r\n  userName: \"\",\r\n  password: \"\",\r\n  firstName: \"\",\r\n  error: \"\"\r\n};\r\n\r\nfunction App() {\r\n  const [state, dispatch] = useReducer(loginReducer, instialState);\r\n\r\n  return (\r\n    <>\r\n      {state.message && (\r\n        <p className={state.isLogedIn ? \"success\" : \"error\"}>\r\n          {state.message}{\" \"}\r\n        </p>\r\n      )}\r\n\r\n      {state.isLogedIn ? (\r\n        <Profile dispatch={dispatch} {...state} />\r\n      ) : (\r\n        <Login dispatch={dispatch} />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport userDB from \"../data/db\";\r\n\r\nexport default () => {\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [alert, setAlert] = useState({ message: \"\", type: \"\" });\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (userName && password && firstName) {\r\n      userDB.push({\r\n        userName,\r\n        firstName,\r\n        password\r\n      });\r\n\r\n      sessionStorage.setItem(\"userDB\", JSON.stringify(userDB));\r\n      setAlert({\r\n        message: \"Account Created SuccessFully, You can now login\",\r\n        type: \"success\"\r\n      });\r\n      setFirstName(\"\");\r\n      setPassword(\"\");\r\n      setUserName(\"\");\r\n      return;\r\n    } else {\r\n      setAlert({ message: \"Please fill all fields\", type: \"error\" });\r\n      return;\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <h2>Create new Account</h2>\r\n      {alert.message && <h5 className={alert.type}>{alert.message}</h5>}\r\n      <div className=\"register\">\r\n        <form onSubmit={e => handleSubmit(e)}>\r\n          <p>\r\n            First Name:\r\n            <input\r\n              type=\"text\"\r\n              name=\"firstName\"\r\n              value={firstName}\r\n              onChange={e => setFirstName(e.currentTarget.value)}\r\n              autoComplete=\"true\"\r\n            />\r\n          </p>\r\n          <p>\r\n            Username:\r\n            <input\r\n              type=\"text\"\r\n              name=\"userName\"\r\n              value={userName}\r\n              onChange={e => setUserName(e.currentTarget.value)}\r\n              autoComplete=\"true\"\r\n            />\r\n          </p>\r\n          <p>\r\n            Password:\r\n            <input\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={e => setPassword(e.currentTarget.value)}\r\n              name=\"password\"\r\n              autoComplete=\"true\"\r\n            />\r\n          </p>\r\n\r\n          <button>Create Account</button>\r\n        </form>\r\n        <p className=\"App-link\">\r\n          Already have Account ? <Link to=\"/\">Login here</Link>\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Register from \"./components/register\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst Routes = () => (\n  <div className=\"App\">\n    <header className=\"App-header\">\n      <BrowserRouter>\n        <Route exact path=\"/\" component={App} />\n        <Route exact path=\"/register\" component={Register} />\n      </BrowserRouter>\n    </header>\n  </div>\n);\n\nReactDOM.render(<Routes />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}